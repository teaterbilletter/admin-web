/**
 * TicketService API
 * Ticketordering by date
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';

import {Show} from '../model/show';
import {Theater} from '../model/theater';

import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable()
export class AdministratorService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()
    @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * @param body
     * * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createShow(body?: Show, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createShow(body?: Show, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createShow(body?: Show, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createShow(body?: Show, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {

        }

        return this.httpClient.post<any>(`${this.basePath}/Show`,
            body,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createTheater(body?: Theater, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createTheater(body?: Theater, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createTheater(body?: Theater, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createTheater(body?: Theater, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {

        }

        return this.httpClient.post<any>(`${this.basePath}/Theater`,
            body,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCustomer(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCustomer(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCustomer(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCustomer(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteCustomer.');
        }



        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {

        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/Customer/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param title
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteShowDates(title: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteShowDates(title: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteShowDates(title: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteShowDates(title: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling deleteShowDates.');
        }



        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {

        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/ShowDates/${encodeURIComponent(String(title))}`,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param oldshowtitle
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateShow(oldshowtitle: string, body?: Show, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateShow(oldshowtitle: string, body?: Show, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateShow(oldshowtitle: string, body?: Show, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateShow(oldshowtitle: string, body?: Show, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oldshowtitle === null || oldshowtitle === undefined) {
            throw new Error('Required parameter oldshowtitle was null or undefined when calling updateShow.');
        }




        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {

        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {

        }

        return this.httpClient.put<any>(`${this.basePath}/Show/${encodeURIComponent(String(oldshowtitle))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param oldtheatername
     * @param body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateTheater(oldtheatername: string, body?: Theater, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateTheater(oldtheatername: string, body?: Theater, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateTheater(oldtheatername: string, body?: Theater, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateTheater(oldtheatername: string, body?: Theater, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (oldtheatername === null || oldtheatername === undefined) {
            throw new Error('Required parameter oldtheatername was null or undefined when calling updateTheater.');
        }




        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {

        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {

        }

        return this.httpClient.put<any>(`${this.basePath}/Theater/${encodeURIComponent(String(oldtheatername))}`,
            body,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
