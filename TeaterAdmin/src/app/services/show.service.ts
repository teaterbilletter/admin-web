/**
 * TicketService API
 * Ticketordering by date
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {HttpClient, HttpEvent, HttpHeaders, HttpResponse} from '@angular/common/http';

import {Observable} from 'rxjs';


import {BASE_PATH} from '../variables';
import {Configuration} from '../configuration';


@Injectable({providedIn: 'root'})
export class ShowService {

    protected basePath = 'https://ticket.northeurope.cloudapp.azure.com:5443';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string,
                @Optional() configuration: Configuration) {
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     *
     *
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllShows(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getAllShows(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getAllShows(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getAllShows(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {



        // authentication (Bearer) required

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/AllShows`,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param title
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getShow(title: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getShow(title: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getShow(title: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getShow(title: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling getShow.');
        }



        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {

        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Show/${encodeURIComponent(String(title))}`,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     *
     *
     * @param theaterName
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getTheater(theaterName: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getTheater(theaterName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getTheater(theaterName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getTheater(theaterName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (theaterName === null || theaterName === undefined) {
            throw new Error('Required parameter theaterName was null or undefined when calling getTheater.');
        }



        // authentication (Bearer) required
        if (this.configuration.apiKeys["Authorization"]) {
          ;
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {

        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<any>(`${this.basePath}/Theater/${encodeURIComponent(String(theaterName))}`,
            {
                withCredentials: this.configuration.withCredentials,

                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
