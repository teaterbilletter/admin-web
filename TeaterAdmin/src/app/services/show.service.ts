/**
 * TicketService API
 * Ticketordering by date
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';

import {observable, Observable} from 'rxjs';


import {Configuration} from '../configuration';
import {BASE_PATH} from '../variables';


@Injectable({providedIn: 'root'})
export class ShowService {

  protected basePath = 'http://localhost:5000';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  public getShowIdFromStorage(): string {
    return window.sessionStorage.getItem('showId');
  }

  public setShowIdInStorage(showId: string) {
    window.sessionStorage.setItem('showId', showId);
  }

  public getAllShows(observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    return this.httpClient.get<any>(`${this.basePath}/AllShows`,
      {
        withCredentials: this.configuration.withCredentials,
        observe,
        reportProgress
      }
    );
  }

  public getOccupiedSeats(dateTime?: string, showID?: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {
    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (dateTime !== undefined && dateTime !== null) {
      queryParameters = queryParameters.set('dateTime', dateTime as any);
    }
    if (showID !== undefined && showID !== null) {
      queryParameters = queryParameters.set('ShowID', showID as any);
    }
    return this.httpClient.get<any>(`${this.basePath}/GetOccupiedSeats`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        observe,
        reportProgress
      }
    );
  }


  public getShow(id: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
  public getShow(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
  public getShow(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
  public getShow(id: number, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling getShow.');
    }
    return this.httpClient.get<any>(`${this.basePath}/Show/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        observe,
        reportProgress
      }
    );
  }

  public getTheater(theaterName: string, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (theaterName === null || theaterName === undefined) {
      throw new Error('Required parameter theaterName was null or undefined when calling getTheater.');
    }
    return this.httpClient.get<any>(`${this.basePath}/Theater/${encodeURIComponent(String(theaterName))}`,
      {
        withCredentials: this.configuration.withCredentials,

        observe,
        reportProgress
      }
    );
  }

}
